// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  FREE
  PREMIUM
}

model User {
  id                 String      @id @default(uuid())
  email              String?     @unique
  firstname          String?
  lastname           String?
  password           String?
  image              String?
  cloudinaryAvatarId String?
  isUserNew          Boolean?    @default(true)
  hasResume          Boolean?    @default(false)
  // credits Int? @default(0)
  type               UserType    @default(FREE)
  practices          Practice[]
  resumes            Resume[]
  cv                 CVBuilder[]
  betaUser           Boolean?    @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now()) @updatedAt
}

model Practice {
  id          Int        @id @default(autoincrement())
  title       String?
  description String?
  stacks      String[]
  role        String?
  level       String?
  resumeText  String?
  isTaken     Boolean?   @default(false)
  questions   Question[]
  userId      String
  users       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback    Feedback?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

model Question {
  id         Int      @id @default(autoincrement())
  question   String?
  practiceId Int
  practices  Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model CVBuilder {
  id        Int      @id @default(autoincrement())
  name      String?
  content   Json
  template  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Resume {
  id           Int      @id @default(autoincrement())
  name         String?
  rawText      String?
  filePath     String?
  cloudinaryId String?
  userId       String
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model Feedback {
  id         Int      @id @default(autoincrement())
  practiceId Int      @unique
  practice   Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  comment    String
  score      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}
